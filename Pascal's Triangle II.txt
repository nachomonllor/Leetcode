https://leetcode.com/explore/featured/card/recursion-i/251/scenario-i-recurrence-relation/3234/
        public static IList<int> GetRow(int rowIndex)
        {

            int[,] dp = new int[rowIndex + 1, rowIndex + 1];

            for (int i = 0; i < rowIndex + 1; i++)
            {
                dp[i, 0] = 1;
                dp[0, i] = 1;
            }


            for (int i = 1; i < rowIndex + 1; i++)
            {
                for (int j = 1; j < rowIndex + 1; j++)
                {
                    dp[i, j] = dp[i, j - 1] + dp[i - 1, j];
                }
            }


            //for (int i = 0; i < dp.GetLength(0); i++)
            //{
            //    for (int j = 0; j < dp.GetLength(1); j++)
            //    {
            //        Console.Write(dp[i, j] + " ");
            //    }
            //    Console.WriteLine();
            //}




            IList<int> ans = new List<int>();


            int fila = rowIndex;
            int col = 0;

            while(fila >= 0 && col <= rowIndex +1)
            {
                ans.Add(dp[fila, col]);
                fila--;
                col++;
            }


            return ans;

        }

----------------------------------------------------------------


def getRow( rowIndex):

    dp = []
    for i in range(rowIndex + 1):
        fila = []
        for j in range(rowIndex + 1):
            if i == 0 or j == 0:
                fila.append(1)
            else:
                fila.append(0)
        dp.append(fila)
        fila = []
      
    print(dp) 

    for i in range(1, rowIndex + 1):
        for j in range(1, rowIndex + 1):
            dp[i][j] = dp[i-1][j] + dp[i][j-1]

    ans = []

    print('\n')
    print(dp)


    fila = rowIndex
    col = 0

    while fila >=0 and col <= rowIndex + 1:
        ans.append(dp[fila][col])
        fila -= 1
        col += 1 

    return ans  




